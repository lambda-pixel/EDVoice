# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  release:
    types: [published]

permissions:
  contents: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
  
    - name: Cache Vulkan SDK
      id: cache-vulkan-sdk
      uses: actions/cache@v1
      with:
        path: "C:\\VulkanSDK\\1.3.283.0"
        key: vulkan-sdk-1.3.283.0
  
    - name: Setup Vulkan
      if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
      run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe" -OutFile VulkanSDK.exe
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
          $installer.WaitForExit();
  
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Package with CPack
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --target package --config ${{env.BUILD_TYPE}}

  release:
      needs: build
      if: github.event_name == 'release'
      runs-on: windows-latest
      permissions:
        contents: write
      steps:
      - uses: actions/checkout@v4
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
            files: ${{github.workspace}}/build/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_UPDATE_RELEASE }}
